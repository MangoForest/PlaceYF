// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PlaceYF.proto

#include "PlaceYF.pb.h"
#include "PlaceYF.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Position_method_names[] = {
  "/Position/GetPosition",
  "/Position/SetPosition",
  "/Position/SetPlaceAnywhere",
  "/Position/ShutDown",
};

std::unique_ptr< Position::Stub> Position::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Position::Stub> stub(new Position::Stub(channel, options));
  return stub;
}

Position::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPosition_(Position_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPosition_(Position_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPlaceAnywhere_(Position_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShutDown_(Position_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Position::Stub::GetPosition(::grpc::ClientContext* context, const ::Empty& request, ::Pos* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Pos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void Position::Stub::async::GetPosition(::grpc::ClientContext* context, const ::Empty* request, ::Pos* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Pos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void Position::Stub::async::GetPosition(::grpc::ClientContext* context, const ::Empty* request, ::Pos* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Pos>* Position::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Pos, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Pos>* Position::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Position::Stub::SetPosition(::grpc::ClientContext* context, const ::Pos& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Pos, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPosition_, context, request, response);
}

void Position::Stub::async::SetPosition(::grpc::ClientContext* context, const ::Pos* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Pos, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPosition_, context, request, response, std::move(f));
}

void Position::Stub::async::SetPosition(::grpc::ClientContext* context, const ::Pos* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Position::Stub::PrepareAsyncSetPositionRaw(::grpc::ClientContext* context, const ::Pos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Pos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Position::Stub::AsyncSetPositionRaw(::grpc::ClientContext* context, const ::Pos& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Position::Stub::SetPlaceAnywhere(::grpc::ClientContext* context, const ::SetAny& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetAny, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPlaceAnywhere_, context, request, response);
}

void Position::Stub::async::SetPlaceAnywhere(::grpc::ClientContext* context, const ::SetAny* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetAny, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlaceAnywhere_, context, request, response, std::move(f));
}

void Position::Stub::async::SetPlaceAnywhere(::grpc::ClientContext* context, const ::SetAny* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPlaceAnywhere_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Position::Stub::PrepareAsyncSetPlaceAnywhereRaw(::grpc::ClientContext* context, const ::SetAny& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::SetAny, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPlaceAnywhere_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Position::Stub::AsyncSetPlaceAnywhereRaw(::grpc::ClientContext* context, const ::SetAny& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPlaceAnywhereRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Position::Stub::ShutDown(::grpc::ClientContext* context, const ::Empty& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutDown_, context, request, response);
}

void Position::Stub::async::ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutDown_, context, request, response, std::move(f));
}

void Position::Stub::async::ShutDown(::grpc::ClientContext* context, const ::Empty* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Position::Stub::PrepareAsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* Position::Stub::AsyncShutDownRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

Position::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Position_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Position::Service, ::Empty, ::Pos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Position::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Pos* resp) {
               return service->GetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Position_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Position::Service, ::Pos, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Position::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Pos* req,
             ::Empty* resp) {
               return service->SetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Position_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Position::Service, ::SetAny, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Position::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetAny* req,
             ::Empty* resp) {
               return service->SetPlaceAnywhere(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Position_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Position::Service, ::Empty, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Position::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Empty* req,
             ::Empty* resp) {
               return service->ShutDown(ctx, req, resp);
             }, this)));
}

Position::Service::~Service() {
}

::grpc::Status Position::Service::GetPosition(::grpc::ServerContext* context, const ::Empty* request, ::Pos* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Position::Service::SetPosition(::grpc::ServerContext* context, const ::Pos* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Position::Service::SetPlaceAnywhere(::grpc::ServerContext* context, const ::SetAny* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Position::Service::ShutDown(::grpc::ServerContext* context, const ::Empty* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


